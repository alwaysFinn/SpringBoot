- Spring Boot

[ 순서 ]
1. IntelliJ 설치
2. Node.js 설치
3. IntelliJ에서 Spring Boot와 연동하기 위해 Start.Spring.io에서 프로젝트 생성
  - Project  : Gradle - Groovy
  - Language : Java
  - Spring Boot Ver : 2.7.8 (안정성을 위해)
  - Java Ver : 11
  - ADD DEPENDENCIES : 
      - Lombok
      - Spring Boot DevTools
      - Thymeleaf (for Html)
      - MyBatis Framework
      - PostgreSQL Driver
      - Spring Data JPA
4. IntelliJ에서 3번에서 생성한 프로젝트 실행 (연동)
5. build.gradle(의존성 관리하는 파일)에서 앞으로 사용할 의존성들 추가
6. DB와 연결 (DB에서의 username, password, ... 입력)
7. Memo.java 파일 생성 (DB에 Table을 생성하고 관리하는, ORM)
  - 일종의 DTO와 같은 ( != DTO / DB와 연관이 있는 것은 맞지만 Spring에서의 DTO의 역할은 못함)
  - Long 타입의 mno라는 컬럼, String 타입의 memoText 컬럼 생성
8. MemoRepository.java 파일 생성 -> 기존의 DAO, DAOImpl, Mapper 역할을 할 파일
9. CRUD를 활용, DB와의 정상 반응 테스트
  - InsertDummies()
  - ReadDummies()
  - UpdateDummies()
  - DeleteDummies()
      
      - @@Repository.save(); -> commit의 명령어
10. Boot에서 페이지 정렬, 페이지네이션을 하는 메서드 확인
  - PageRequest.of(x, y) 
    - x : 현재 페이지, 항상 시작 페이지는 0으로 시작
    - y : 한번에 보여줄 게시물의 개수
  - .getTotalPages() -> 총 페이지 수
  - .getTotalElements -> 전체 개수
  - .getNumber() -> 현재 페이지 번호 (인덱스처럼 접근 / 0, 1, 2, ...)
  - .getSize() -> 페이지당 데이터 개수 (y를 return)
  - .hasNext() -> 다음 페이지 존재 여부 (t or f)
  - .isFirst() -> 현재 페이지가 시작 페이지(0)인지 아닌지 여부 (t or f)
  
  11. Boot에서 페이지 정렬하는 메서드 확인
    - mno 컬럼을 기준으로 descending()하는 sort1 생성
    - memoText 컬럼을 기준으로 ascending()하는 sort2 생성
    - sortAll = sort1 and sort2 즉 mno를 기준 내림차순, memoText를 기준으로 오름차순 정렬
    - 한번에 게시물 10개씩 보여주되 sortAll을 기반으로 정렬해서 보여주게 페이지 설정 (PageRequest.of(0, 10, sortAll))
    - result<>에 실제 DB에서 가져온 값을 저장
    - 반복문을 사용해서 하나씩 출력
    

  
  
      
